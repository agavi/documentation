<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
"http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="slots">
  <title>Validation</title>
  <conbody>
    <section id="what-is-validation">
      <title>What is validation?</title>
      <p>Validation is Agavi's way to make sure that the request data
      conforms to certain rules.  If these rules are violated, the
      framework would refuse to execute your code. When used
      correctly, validation nullifies the threats of malformed
      data. Malformed data is anything from the user typing an
      errorneous URL that contains unexpected parameters over
      validating form input data to preventing malicious user from
      attacking your application by using specially crafted input
      parameters. Attacks include the full range from <term
      >XSS-attacks</term> to <term>SQL-Injection</term>. Validation is
      a core feature to make your application as robust and
      error-tolerant as possible. Incorrect input data may include any
      user supplied data, ranging from GET and POST parameters,
      Cookies and HTTP-Headers in the web-context over to environment
      variables and commandline arguments in console contexts.</p>
      <p>Validation is applied to Actions regardless of how they're
      executed. You set up validation once and the Action is
      guaranteed to follow it, whether it runs as a slot, in a command
      line context, etc.</p>
      <p>The validator XML configuration allows you to specify all the
      parameters to be validated and validator classes that apply to
      them. Agavi ships with many validator classes, and you can easily
      write a custom one when you need to validate some special type of
      input (think barcodes, chemical formulae and so on).</p>
      <p>Validators can also modify the input parameters of the
      Action. It is possible, for example, to write a validator that
      maps HTML &lt;select&gt; options' values to database objects, or
      turns pretty URL partials into object IDs. Using these techniques,
      it's possible to create Actions that receive PHP objects as
      parameters, and not just primitive types.</p>
    </section>
  </conbody>
</concept>