<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="routing-url-generation">
  <title>Generating URLs</title>
  <body>
    <p>When Agavi applications generate HTML or other output, links pointing back to the application are never hardcoded into the
    templates. Agavi Routing has an URL generation facility which you should use. Routing can use
    the <xref href="routing-map.dita">routing map</xref> to construct URLs which can be parsed back, and it does so consistently.</p>
    <p>The link generation facility can be accessed through the use of Routing's <apiname>gen</apiname>() method.</p>
    <p>Class <apiname>AgaviWebRouting</apiname> that is used in Web context defines this method as follows:</p>
    <codeblock class="php"><![CDATA[string  gen  (string $route, [ $params = array()], [mixed $options = array()])]]></codeblock>
    
    <p>The first parameter <varname>$route</varname> defines a route, or a set of routes that you wish to employ for URL generation,
    using the rule names specified by routes' <varname>name</varname> attribute.</p>

    <p>The second parameter <varname>$params</varname> is an array of values that should be employed in route generation. It
    should contain values for any named parameters that can be captured by routing.</p>

    <p>The third parameter <varname>$options</varname> is an array of options for URL generation.</p>

    <section>
      <title>Specifying target routes for generation</title>
      
      <p>Since Routing supports nested routes and special extensions via <xref href="routing-callbacks.dita">callbacks</xref>, it is often necessary
      to specify a <i>set</i> of routes as opposed to just a single route. The simplest construct is the dot notation:</p>

      <codeblock class="xml"><![CDATA[<route name="blog" pattern="^/blog" module="Blog">
 <route name=".home" pattern="^$" action="Index"/>
 <route name=".post" pattern="/(post_id:\d+)$" action="Post"/>
</route>]]></codeblock>

      <codeblock class="php"><![CDATA[<?php $url = $this->context->getRouting()->gen('blog.post', array('post_id' => $post['id'])); ?>]]></codeblock>

      <p>You can use the plus sign (+) to indicate that some additional routes need to be considered when building the URL:</p>

      <codeblock class="xml"><![CDATA[
<route name="plaintext" pattern=".txt$" output_type="plaintext" stop="false" cut="true"/>

<route name="blog" pattern="^/blog" module="Blog">
 <route name=".home" pattern="^$" action="Index"/>
 <route name=".post" pattern="/(post_id:\d+)$" action="Post"/>
</route>]]></codeblock>

      <codeblock class="php"><![CDATA[<?php print $ro->gen('blog.post+plaintext', array('post_id' => $template['post_id']));?>]]></codeblock>
  
      <p>Assuming that <varname>$template</varname>['post_id'] contains the value 42, the above call to <apiname>gen</apiname>() would yield "/blog/42.txt".</p>

      <p>On the other hand, the minus (-) can be used to exclude a certain implied route from generation.</p>
      
      <p>If you specify <keyword>null</keyword> in <apiname>gen</apiname>()'s <varname>$route</varname> parameter, Routing will generate the URL
      according to a route or set of routes that matched when parsing the current request. So, using the <keyword>+route</keyword>
      and <keyword>-route</keyword> syntax without a qualified route name applies the inclusion or exclusion to the matched routes
      of this request.</p>
    </section>
      <section>
  <title>Generation options</title>
  <p><apiname>gen</apiname>() accepts an array of options via its <varname>$options</varname> that affect the way the route is generated:</p>
  <dl>
    <dlentry>
      <dt>relative</dt>
      <dd>When true, generate a fully qualified URL. Otherwise, generate an URL relative to the application base URL (default behaviour).</dd>
    </dlentry>

    <dlentry>
      <dt>refill_all_parameters</dt>
      <dd>Fill all the parameters in the route with the values from the current request, until the first user-supplied
      parameter value. This is the equivalent of the asterisk syntax in <varname>$route</varname> (see above).</dd>
    </dlentry>

    <dlentry>
      <dt>omit_defaults</dt>
      <dd>If the parameter values towards the end of the URL equal their default values, remove them from the URL. This
      results in shorter URLs. The default value is false.</dd>
    </dlentry>

    <dlentry>
      <dt>separator</dt>
      <dd>The argument separator character to be used in the URL. Default value is obtained from <filepath>php.ini</filepath> <varname>arg_separator.output</varname></dd>
    </dlentry>

    <dlentry>
      <dt>use_trans_sid</dt>
      <dd>Export the session ID (as returned by <apiname>session_id()</apiname>) to argument <apiname>session_name()</apiname>. Default is false.</dd>
    </dlentry>

    <dlentry>
      <dt>scheme</dt> 
      <dd>URI scheme, default is obtained from current request (typically "http" or "https")</dd>
    </dlentry>

    <dlentry>
      <dt>authority</dt>
      <dd>URI authority (user:password@hostname:port) for an absolute URL, default is obtained from current request</dd>
    </dlentry>

    <dlentry>
      <dt>host</dt>
      <dd>Host name for an absolute URL, default is obtained from the current request.</dd>
    </dlentry>

    <dlentry>
      <dt>port</dt>
      <dd>Port number for an absolute URL. Default value is obtained from the current request. Default is obtained from the current request. If the port number equals the default port number for the scheme, then it is not included in the generated URL (80 for HTTP, 443 for HTTPS).</dd>
    </dlentry>

    <dlentry>
      <dt>Fragment</dt>
      <dd>Value of the fragment part of the generated URL (http://foo/bar#fragment). Routing does not deal with fragments, so the fragment part is omitted unless this parameter is explicitly specified.</dd>
    </dlentry>
  </dl>
      </section>
  </body>
</topic>
