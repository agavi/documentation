<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
	  "http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="bloggie-stage3-layout-configuration-public">
  <title>Configuring Bloggie layouts</title>
  <body>
    <p>In order to dress Bloggie using a given template, we need to perform several steps:
      <ol>
	<li>Cut out and adjust the decorator template for all our Views and place it in the template directory</li>
	<li>Copy all the template resources (stylesheets, images, scripts) to a webserver directory</li>
	<li>Enable the use of the decorator template in output types configuration</li>
	<li>If needed, adjust the existing templates to fit with the new style and conventions</li>
      </ol>
    </p>
    <p>Once configured, Agavi's rendering mechanism will apply the
      templates in the proper order, and we'll be able to see our
      Bloggie application dressed.</p>
    <section>
      <title>Preparing the template</title>
      <p>For the purposes of this example application, we'll be using
	the open source Blue Sky template by Arcsin. It is a simple
	template that has a single template layout contained in <filepath>index.html</filepath>, a stylesheet and a couple of images.</p>
      <p>First, let's copy the contents
	of <filepath>index.html</filepath> to the application. Since
	we're dressing a single <keyword>Module</keyword>, we'll create
	the decorator template
	in <filepath>app/modules/Public/templates/decorator.php</filepath></p>
      <p>Now we have to make some edits in the original Blue Sky
	layout to make it an appropriate decorator template:
	<ul>
	  <li>We need to let the browsers know how to calculate
	    relative paths: you will see the HTML BASE element in this
	    template receiving its base value from Agavi's Routing. This is
	    a good practice.</li>
	  <li>The document's title varies from page to page, so we
	  should export it into the template.</li>
	  <li>We need to remove all the "inner" content of the
	    decorator that our Actions will be filling. To substitute the
	    output, we use a special variable <varname>$inner</varname>.</li>
	  <li>We also need to copy the template's resources (images and the
	    stylesheet) to our <filepath>pub/</filepath> directory so that
	    they become available to the webserver. Since these all belong
	    to the Public <keyword>Module</keyword>, we'll create a subdirectory and copy everything template related in it:
	    <ul>
	      <li><filepath>pub/public/default.css</filepath></li>
	      <li><filepath>pub/public/img/bgcode.gif</filepath></li>
	      <li><filepath>pub/public/img/bg.gif</filepath></li>
	      <li><filepath>pub/public/img/bgholder.jpg</filepath></li>
	      <li><filepath>pub/public/img/holder.jpg</filepath></li>
	      <li><filepath>pub/public/img/li.gif</filepath></li>
	      <li><filepath>pub/public/img/navhover.gif</filepath></li>
	      <li><filepath>pub/public/img/quote.gif</filepath></li>
	    </ul>
	  </li>
	  <li>Since we added a subdirectory for the module, we'll also need
	    to adjust paths in the stylesheet and the decorator to point
	    to the new locations of the image files.</li>
	</ul>
      </p>
      
      <p>The resulting <filepath>decorator.php</filepath> will now
	look like this:</p>
      <codeblock conref="examples.xml#layouts-complete-stage3-decorator-public" class="xml"/>
      <p>Note that the navigation section is filled with dummy content.</p>
      <p>Now we need to remove the HTML header and footer from the
	Action templates, because these will be provided by the
	decorator. Here's new code
	for <filepath>app/modules/Public/templates/IndexSuccess.php:</filepath>:
	<codeblock conref="examples.xml#stage3-index-modified-template"
	class="xml"/>
      </p>
      <p>Our other Action's template code also changes (<filepath>app/modules/Public/templates/ShowPostSuccess.php</filepath>):
      <codeblock conref="examples.xml#stage3-showpost-modified-template" class="xml"/>
      </p>
    </section>
    <section>
      <title>Configuring Bloggie to use the new decorator</title>
      <p>Reconfiguring Bloggie in our case is very simple: we need to
	add another Layer into the default layout for HTML output
	type. This is achieved by adjusting the &lt;layouts&gt;
	element of <filepath>app/config/output_types.xml</filepath>, under the "HTML" output type.
	You need to add a single layer definition:
	<codeblock conref="examples.xml#stage3-modified-output-types" class="xml"/>
      </p>
      <p>The View can create the layout from scratch using Agavi API,
	or load a desired layout from the configuration. The layout configuration is then used by Agavi to perform rendering.</p>
      <p>What happens when the new configuration is in place? Every
      View that uses the default layout (most Views achieve this by
      calling setupXXX where XXX is output type name) will now have
      access to two Layers. The View's own template (which matches the
      name of the View) will be loaded into the "content" Layer, and
      the fixed decorator template will be loaded into the "decorator"
      Layer. The rendered contents of the former would be inserted
      into the specially reserved spot of the latter, creating a
      consistent visual decoration on every page.</p>
      <p>Voila! Now Bloggie has a complete look.</p>
    </section>
  </body>
</topic>
