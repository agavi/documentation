<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="examples">
  <title>Tutorial source code examples</title>
  <body>
    <codeblock id="services-example-context">
$db_conn = $this->context->getDatabaseManager()->getDatabase('mydb');
    </codeblock>
    <codeblock id="services-example-config"><![CDATA[
// Retrieve a configuration value for item "meaning_of_life" and prefix "org.mycompany.myapp"
// In settings.xml this would be:
//
// <settings prefix="org.mycompany.myapp">
//  <setting name="meaning_of_life">24</setting>
// </setting>
//
// The second parameter is the value that should be returned instead of null

$val = AgaviConfig::get('org.mycompany.myapp.meaning_of_life', 42);]]>
    </codeblock>
    <codeblock id="services-example-database">
$dbm = $this->context->getDatabaseManager();
$db = $dbm->getDatabase('blog');
$conn = $db->getConnection();
    </codeblock>
   <codeblock id="services-example-routing-gen">
$ro = $this->context->getRouting();

// Generate an absolute URL to a named route 
$url = $ro->gen('posts.edit', array('id' => $post->id), array('relative' => false));
    </codeblock>
    <codeblock class="e1" id="configuration-database">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;configurations xmlns="http://agavi.org/agavi/1.0/config"&gt;
 &lt;!-- The "development" attribute here means that this configuration is
only used in the development mode. See pub/index.php in which the current
environment is set. --&gt;
 &lt;configuration environment="development"&gt;
  &lt;databases default="blog"&gt;
   &lt;!-- AgaviPdoDatabase is the adapter class for PHP PDO --&gt;
   &lt;database name="blog" class="AgaviPdoDatabase"&gt;
    &lt;parameter name="dsn"&gt;mysql:host=localhost;dbname=bloggie_dev&lt;/parameter&gt;
    &lt;parameter name="username"&gt;bloggie&lt;/parameter&gt;
    &lt;parameter name="password"&gt;password&lt;/parameter&gt;
   &lt;/database&gt;
  &lt;/databases&gt;
 &lt;/configuration&gt;
&lt;/configurations&gt;
</codeblock>
<codeblock id="stage2-base-model">
  /**
  * The base model from which all project models inherit.
  */

class BlogBaseModel extends AgaviModel
{
  /**
   * Return the PDO resource needed to access the blog database
   * @return PDO
   */
  protected function getPdo()
  {
    // The connection parameters are configured in app/config/databases.xml
    return $this->context->getDatabaseManager()->getDatabase()->getConnection('blog');
  }
}

?>
</codeblock>
<codeblock id="stage2-posts-model">
  /**
   * This Model is used to retrieve posts and their contents
   */

class Public_PostsModel extends BlogBaseModel
{
  /**
   * Retrieve 20 last posts.
   *
   * Selects the post summary, category name and author's screen name
   * @return array Array of posts (id, title, posted, author_name, category_name)
   */

  public function findFrontPagePosts()
  {
    // Obtain the connection identifier from our base class
    // This works out to $this->context->getDatabaseManager()->getConnection()

    $conn = $this->getPdo();

    $sql = 'SELECT p.id, p.title, p.posted , a.screen_name AS author_name, c.name AS category_name
           FROM posts p
           LEFT JOIN admin_users a ON p.author_id = a.id
           LEFT JOIN categories c ON p.category_id = c.id
           ORDER BY posted DESC LIMIT 20';
    
    return $conn->query($sql)->fetchAll();
  }

  /**
   * Fetch a post by ID
   *
   * Retrieve a post record by given ID
   * @param integer $id ID of the requested post
   * @return array Post contents (all post fields, category_name, author_name)
   */

  public function findPostById($id)
  {
    $conn = $this->getPdo();
    
    $sth = $conn->prepare('SELECT p.*, a.screen_name AS author_name, c.name AS category_name
           FROM posts p
           LEFT JOIN admin_users a ON p.author_id = a.id
           LEFT JOIN categories c ON p.category_id = c.id
           WHERE p.id = ? LIMIT 1');
    $sth->execute(array($id));
    
    return $sth->fetch(PDO::FETCH_ASSOC);
  }
}
</codeblock>
<codeblock id="stage2-index-action">/**
   * This Action doesn't change anything in the application state, so
   * it has no execute() methods. 
   */

class Public_IndexAction extends BlogPublicBaseAction
{
  /**
   * Returns the default view name which is used by Agavi to find the
   * View as the last resort (e.g. Public_IndexSuccessView)
   */

  public function getDefaultViewName()
  {
    return 'Success';
  }
}
</codeblock>
<codeblock id="stage2-index-success-view">
class Public_IndexSuccessView extends BlogPublicBaseView
{
  public function executeHtml(AgaviRequestDataHolder $rd)
  {
    // Load the rendering configuration. 
    $this->setupHtml($rd);

    // Obtain the Posts model from this module
    $m = $this->context->getModel('Posts', 'Public');

    // Obtain the list of most recent posts from the model and export
    // it so that templates can access it
    $this->setAttribute('posts', $m->findFrontpagePosts());
  }
}
      </codeblock>
      <codeblock id="stage2-showpost-action">
class Public_ShowPostAction extends BlogPublicBaseAction
{
  // Just to demonstrate how an execute() method looks, we'll define
  // executeRead() which corresponds to HTTP GET.

  /**
   * Returns just the View name to be executed next 
   */

  public function executeRead(AgaviRequestDataHolder $rd)
  {
    return 'Success';
  }

  // Note that getDefaultViewName() is missing. Calling this action
  // with any HTTP verb other than GET will cause an error because
  // Agavi wouldn't be able to determine the View and so wouldn't be
  // able to create an HTTP response.
}
      
</codeblock>
<codeblock id="stage2-showpost-success-view">
class Public_ShowPostSuccessView extends BlogPublicBaseView
{
  public function executeHtml(AgaviRequestDataHolder $rd)
  {
    // Load the rendering configuration 
    $this->setupHtml($rd);

    // Obtain the requested post from the model
    $m = $this->context->getModel('Posts', 'Public');

    $post = $m->findPostById($rd->getParameter('post_id'));
    $this->setAttribute('post', $post);
  }
}
      </codeblock>

<codeblock id="user-object-example">// Obtain the current User object
$us = $this-&gt;context-&gt;getUser();

if (! $us-&gt;isAuthenticated())
 die("This user is not logged in!");

// Let's obtain the username that was previously placed here by someone else -
// for instance a login Action
$username = $us-&gt;getAttribute('username');

// If this user hasn't been seen for more than an hour, we'll log him out
if ( (time() - $us-&gt;getAttribute('last_seen_at')) &gt; 3600 )
{
  $us-&gt;setAuthenticated(false);
  return;
}

// Let's refresh the timestamp on the user 
$us-&gt;setAttribute('last_seen_at', time());

// If it's suddenly Christmas, allow the user to see Christmas-only pages
if (isItChristmas()) $us-&gt;addCredential('christmas');
</codeblock>
<codeblock id="output-types-simple-example"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<configurations xmlns="http://agavi.org/agavi/1.0/config">
  <configuration>
    <output_types default="html">
      <output_type name="html">
	<renderers default="php">
	  <renderer name="php" class="AgaviPhpRenderer">
	    <parameter name="assigns">
	      <parameter name="routing">ro</parameter>
	      <parameter name="request">rq</parameter>
	      <parameter name="controller">ct</parameter>
	      <parameter name="user">us</parameter>
	      <parameter name="translation_manager">tm</parameter>
	      <parameter name="request_data">rd</parameter>
	    </parameter>
	  </renderer>
	</renderers>

	<layouts default="default">
	  <layout name="default">
	    <layer name="content" />
	  </layout>
	</layouts>

	<parameter name="http_headers">
	  <parameter name="Content-Type">text/html; charset=UTF-8</parameter>
	</parameter>
      </output_type>
    </output_types>
  </configuration>
</configurations>
]]></codeblock>
<codeblock id="layouts-full-html-example">
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;My website&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;navigation&quot;&gt;
&lt;!--- navigation stuff here --&gt;
&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
  &lt;h1&gt;My content page&lt;/h1&gt;
  &lt;p&gt;Blah blah&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
</codeblock>
<codeblock id="layouts-classic-html-header">
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;My website&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;navigation&quot;&gt;
&lt;!--- navigation stuff here --&gt;
&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
</codeblock>
<codeblock id="layouts-classic-html-page">
&lt;?php require_once 'header.inc.php'; ?&gt;
&lt;h1&gt;My content page&lt;/h1&gt;
&lt;p&gt;Blah blah&lt;/p&gt;
&lt;?php require_once 'footer.inc.php'; ?&gt;
</codeblock>
<codeblock id="layouts-classic-html-footer">
&lt;/div&gt;
&lt;/body&gt;
</codeblock>
<codeblock id="layouts-agavi-html-decorator">
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;My website&lt;/title&gt;
&lt;body&gt;
&lt;div class=&quot;navigation&quot;&gt;
&lt;!--- navigation stuff here --&gt;
&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;?php print $inner; ?&gt;
&lt;/div&gt;
&lt;/body&gt;
</codeblock>
<codeblock id="layouts-agavi-html-view-template">
&lt;h1&gt;My content page&lt;/h1&gt;
&lt;p&gt;Blah blah&lt;/p&gt;</codeblock>
<codeblock id="layouts-complete-stage3-decorator-public"><![CDATA[
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta name="description" content="Agavi Demo Blog Application"/>
<meta name="keywords" content="agavi, demo, win, god"/> 
<meta name="author" content="Agavi Development Team"/> 
<link rel="stylesheet" type="text/css" href="/public/default.css" media="screen"/>
<base href="<?php print $ro->getBaseHref(); ?>"/>
<title><?php print $template['title'];?></title>
</head>
<body>
<div class="container">
<div class="title" style="background: url(/agavi.png) no-repeat; padding-left: 64px; ">
  <h1 id="title"><a href="<?php print $ro->gen('home'); ?>">Agavi Demo Blog</a></h1>
  <?php if ($template['title']): ?><h2><?php print $template['title'];?></h2><?php endif;?>
</div>

<div class="navigation">
  
  <?php

  /* Print a slot. The layout configuration specifies which Action
  goes into this slot - the default layout loads ShowNavigation. Admin
  module has its own ShowNavigation, and the base View class for the
  Admin module is instructed to load the admin layout by default, in
  which the Public ShowNavigation is overridden with Admin
  ShowNavigation */

  print $slots['navigation'];

  ?>
<div class="clearer"><span></span></div>
</div>

<div class="holder_top"></div>
<div class="holder">
  <?php

  /* Print whatever is in the layer above this - normally an Action's output */
  print $inner; 
  
  ?>
</div>
<div class="holder_bottom"></div>

<div class="holder_top"></div>
<div class="holder">
<div class="footer">&#169; 2008 <a href="index.html">bloggie.dev</a>. Valid <a href="http://jigsaw.w3.org/css-validator/check/referer">CSS</a> &amp; <a href="http://validator.w3.org/check?uri=referer">XHTML</a>. Template design by <a href="http://arcsin.se">Arcsin</a>
</div>
</div>
<div class="holder_bottom"></div>
</div>
</body>
</html>]]>
</codeblock>
<codeblock id="stage3-showpost-modified-template">
&lt;?php

 // For convenience, import the post contents into a local variable
 $post = $template['post']; 
?&gt;

 &lt;h1&gt;&lt;?php print $post['title']; ?&gt;&lt;sub &gt;by &lt;?php print $post['author_name']; ?&gt;&lt;/sub&gt;&lt;/h1&gt;
 &lt;h4&gt;in &lt;?php print $post['category_name']; ?&gt;
 &lt;h5&gt;&lt;?php print $post['posted']; ?&gt;&lt;/h5&gt;
 &lt;div&gt;
  &lt;?php print $post['content']; ?&gt;
 &lt;/div&gt;
</codeblock>
<codeblock id="stage3-index-modified-template">
 &lt;h1&gt;Latest posts&lt;/h1&gt;
 &lt;!-- Loop over the posts exported by the View --&gt;
 &lt;?php if (! empty($template['posts'])) foreach($template['posts'] as $post):?&gt;
 &lt;hr/&gt;
 &lt;h3&gt;
   &lt;!-- Generate a link to the post, using its title as the caption --&gt;
   &lt;a href=&quot;&lt;?php print $ro-&gt;gen('ShowPost', array('post_id' =&gt; $post['id'])); ?&gt;&quot;&gt;&lt;?php print $post['title']; ?&gt;&lt;/a&gt;
 &lt;/h3&gt;
   &lt;!-- the summary line with author name, posting date and category name --&gt;
by &lt;?php print $post['author_name']; ?&gt; @ &lt;?php print $post['posted']; ?&gt; in &lt;strong&gt;&lt;?php print $post['category_name']; ?&gt;&lt;/strong&gt;

 &lt;?php endforeach; ?&gt;
</codeblock>
<codeblock id="stage3-modified-output-types">
	&lt;layouts default=&quot;default&quot;&gt;

	  &lt;!-- The default layout for HTML includes two layers: the
	       &quot;content&quot; layer is used by the View to render its
	       output, and the &quot;decorator&quot; layer is preconfigured with
	       the decorator template of the Public module --&gt;

	  &lt;layout name=&quot;default&quot;&gt;

	    &lt;!-- This is the topmost layer. Views would render their output here, using a default
	    template name that matches the name of the View. --&gt;
	    &lt;layer name=&quot;content&quot; /&gt;

	    &lt;!-- The output of the above layer will fall through into this fixed layer, which is preconfigured
	    to render the decorator template. The content of the output becomes available to us here
	    through $inner (see app/modules/Public/templates/decorator.php) --&gt;
	    &lt;layer name=&quot;decorator&quot;&gt;
	      &lt;parameter name=&quot;template&quot;&gt;decorator&lt;/parameter&gt;
	      &lt;parameter name=&quot;directory&quot;&gt;%core.module_dir%/Public/templates&lt;/parameter&gt;
	    &lt;/layer&gt;
	  &lt;/layout&gt;
	&lt;/layouts&gt;
</codeblock>

</body>
</topic>