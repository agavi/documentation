<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="basics-a-word-about-actions">
  <title>A Word About Actions</title>
  <body>
    <p>Actions interact with models to implement the aplication specific logic, they serve to offer
      interaction between incoming requests and the business model. All data retrival (database
      access, flatfiles and etc) should be encapsulated in actions. An action also handles all the
      validation requirements and all error handling.</p>
    <section>
      <title>RequestMethods and Action Execution</title>
      <p>Request methods are a concept in Agavi that abstracts from the HTTP verbs GET/POST/PUT etc
        to more general terms that are applicable in any environment. Agavi can be used in SOAP,
        XML-RPC, console and other contexts where HTTP may not be involved. The most common
        methodnames are Read and Write, but others like Create and Delete exist and you can define
        your own methodnames on the fly if required. The default methodnames are chosen to map
        nicely to the standard HTTP verbs and also fit nicely into all other environments. The
        default mapping for HTTP verbs is as follows: <table frame="none"
          id="table_83c48380-8375-4f78-92a9-0f75885d2674"><title>HTTP Verb
            Transations</title><tgroup cols="2"><colspec colname="c1" colnum="1"/><colspec
              colname="c2" colnum="2"/><thead><row><entry>Verb</entry><entry
                >Translation</entry></row></thead><tbody><row><entry>GET</entry><entry>Read</entry></row><row><entry>POST</entry><entry>Write</entry></row><row><entry>PUT</entry><entry>Create</entry></row><row><entry>DELETE</entry><entry>Delete</entry></row></tbody></tgroup></table>An
        action may respond to a specific request method by simply implementing a method named after
        the request method, such as <apiname>executeRead</apiname> to respond to GET requests or
          <apiname>executeWrite</apiname> to respond to POST requests. An action may respond to as
        many request methods as you wish simply by implementing more than one execute method. An
        action may respond to all request methods by implementing a method <apiname
          >execute()</apiname>. An action may skip all exection by simply defining a method <apiname
          >isSimple()</apiname> and returning a <codeph>boolean true</codeph>. If an action does not
        respond to a request method, the default method <apiname>getDefaultView()</apiname> is
        called. </p>
    </section>
  </body>
</topic>
