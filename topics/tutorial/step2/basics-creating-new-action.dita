<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="basics-creating-new-action">
  <title>Creating a new action</title>

  <body>
    <p/>

    <section><title>Creating a new action</title> <p>To create a new action
    invoke <userinput>agavi action</userinput> and answer the questions.</p>
    <screen>
      bloggie$ <userinput>agavi action</userinput>

      Module name: <userinput>Posts</userinput>

      Action name: <userinput>Post.Show</userinput>

      Space-separated list of views to create for Post.Show [Success]: 

      bloggie$ 
      </screen> <p>We created a new action named "Post.Show" in the Posts
    module. The dot in the name denotes a subaction. Subactions can be nested
    to arbitrary depth and are useful to organize your actions in a tree-like
    structure. Now we just need to make that action accessible with an url.
    Once again we use a route for that. Hang on a litte, we'll explain routing
    in a moment. For now, just insert this route in the routing.xml, right
    after the index route: <codeblock class="xml">

	&lt;route name="post" pattern="^/post$" module="Posts" action="Post.Show" /&gt;

</codeblock> Done. The action "Post.Show" in the module "Posts" will now be
    accessible by the url /post. Go ahead, open your browser and try it. You
    should see a page with a big headline saying "Post.Show".</p></section>

    <section><title>Adding content</title> <p>You already learned about
    template variables in the last parts, so we make this a quick one - we
    just add the information for a single post to the template, containing the
    same information as in the list plus the body. We allow for the body to
    contain html, so we can format the text a little. Data retrieval goes in
    the action, so add the Posts_Post_ShowAction::executeRead() to look like
    this.</p><p><codeblock class="php">
	public function executeRead(AgaviRequestDataHolder $rd)
	{
	
		$post = array(
			'id' =&gt; 1,
			'title' =&gt; 'First post',
			'posted' =&gt; '2008-07-14 00:01:07',
			'category_name' =&gt; 'No category',
			'author_name' =&gt; 'Admin',
			'url' =&gt; null,
			'content' =&gt; '&lt;p&gt;Terrific! This is our first post!&lt;/p&gt;&lt;p&gt;This is just a first post. It has no actual contents. If you are reading this, things must be working.&lt;/p&gt;'
		);

		$this-&gt;setAttribute('post', $post);
	}
</codeblock> And we should adapt the title here as well. So open the the
    Posts_PostSuccessView and change the line saying <codeblock class="php">
	$this-&gt;setAttribute('_title', 'Index');

</codeblock> to <codeblock class="php">
		$post = $this-&gt;getAttribute('post');
		$this-&gt;setAttribute('_title', $post['title']);

</codeblock></p><p>An then the template: <codeblock class="php">

&lt;?php
// alias the post, to make access shorter
$post = $t['post'];
?&gt;
&lt;span class="author"&gt;by &lt;?php echo htmlspecialchars($post['author_name']); ?&gt;&lt;/span&gt;
&lt;span class="category"&gt;in &lt;?php echo htmlspecialchars($post['category_name']); ?&gt;&lt;/span&gt;
&lt;span class="posted"&gt;&lt;?php htmlspecialchars($post['posted']); ?&gt;&lt;/span&gt;
&lt;div class="content"&gt;&lt;?php echo $post['content']; ?&gt;&lt;/div&gt;
</codeblock> Open your browser and point it to
    http://localhost/bloggie/pub/post and you should see the stub page we just
    created. </p></section>
  </body>
</topic>
