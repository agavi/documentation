<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="basics-creating-new-module">
  <title>Creating A New module</title>
  <body>
    <p>The index page should contain a list of posts and link to the detail page - don't worry we'll
      add that one later. For each post, the title and the author is displayed, as well as the date
      it was posted and the category it was posted in.</p>
    <section>
      <title>Creating A New module</title>
      <p>A module is an organizational unit structuring your applications separate areas of concern.
        A module structures Actions, Views, Models and Templates into a common subdirectory. It can
        even bring it's own libraries and some configs specific to this module. Handling the Post
        and displaying them to the user is one area of concern for our blog, so code related to that
        should be placed in one module.</p>
      <p>Creating a new module is a simple task if we use the agavi commandline script. So navigate
        to the directory where you created your application, invoke <userinput>agavi
          module-wizard</userinput> and answer the questions.</p>
      <screen>
      bloggie$ <userinput>dev/bin/agavi module-wizard</userinput>

      Module name: <userinput>Posts</userinput>

      Space-separated list of actions to create for Posts: <userinput>Index</userinput>

      Space-separated list of views to create for Index [Success]: 

      bloggie$ 
      </screen>
      <p>We created a new module named "Posts" which currently contains a single action named
        "Index". However, this action is not accessible as there is no route that points to it. We
        want the list of posts to be on the front page so we just point the default index route to
        that action. In <filepath>app/config/routing.xml</filepath>, look for the route that looks
        like that: <codeph>&lt;!-- default action for "/" --&gt; &lt;route name="index"
          pattern="^/$" module="%actions.default_module%" action="%actions.default_action%"
          /&gt;</codeph> and change it to point to the new action:
        <codeblock outputclass="xml">
  &lt;!-- default action for "/" --&gt;
  &lt;route name="index" pattern="^/$" module="Posts" action="%actions.default_action%" /&gt;
        </codeblock>
        Done. The "Index" action in the module "Posts" will now be the index page. We could now
        remove the old IndexAction, but just keep that one for later, we will need it.</p>
    </section>
    <section>
      <title>Adding a template variable</title>
      <p>We want to display a list of posts on the index page. For now, we're just concerned about
        getting the basic html to work, so we just forget about where to get the data from for the
        time being. We'll just pass a static array of posts to the template. A post will need the
        following information to be displayed:</p>
      <dl>
        <dlentry>
          <dt>id</dt>
          <dd>The posts id.</dd>
        </dlentry>
        <dlentry>
          <dt>title</dt>
          <dd>The posts title.</dd>
        </dlentry>
        <dlentry>
          <dt>author_name</dt>
          <dd>The authors name.</dd>
        </dlentry>
        <dlentry>
          <dt>posted</dt>
          <dd>The date the post was created.</dd>
        </dlentry>
        <dlentry>
          <dt>category_name</dt>
          <dd>The name of the category the post was filed under.</dd>
        </dlentry>
        <dlentry>
          <dt>url</dt>
          <dd>The url to the posts detail page. We will leave that one empty but include it so that
            the attributes are complete.</dd>
        </dlentry>
      </dl>
      <p> To pass the information to the template we just need to set it as an attribute in the view
        or the action. Any attribute set in the global namespace will be available in the template
        later on. We want to serve the index page on Read (GET) requests so we define the <apiname
          >Posts_IndexAction::executeRead()</apiname> [<filepath
          >app/modules/Posts/actions/IndexAction.class.php</filepath>] as follows - remember that
        all data retrieval should be done in the
          action:<codeblock outputclass="php">
  public function executeRead(AgaviRequestDataHolder $rd)
  {

    $posts = array(
      1 =&gt; array(
        'id' =&gt; 1,
        'title' =&gt; 'First post',
        'posted' =&gt; '2008-07-14 00:01:07',
        'category_name' =&gt; 'No category',
        'author_name' =&gt; 'Admin',
        'url' =&gt; null
      ),
      2 =&gt; array(
        'id' =&gt; 2,
        'title' =&gt; 'Second post',
        'posted' =&gt; '2008-07-14 00:01:07',
        'category_name' =&gt; 'Agavi',
        'author_name' =&gt; 'Admin',
        'url' =&gt; null
      )
    );

    $this-&gt;setAttribute('posts', $posts);

    return 'Success';
  }
        </codeblock><note
          type="remember">The <apiname>Posts_IndexAction::executeRead()</apiname>method is called
          any time a Read request is mapped to this action. Please refer to <xref
            href="../a-word-about-actions.dita">Chapter 1</xref> for a more detailed
          explanation.</note> And while we're at it - why don't we change the page title a little,
        have you noticed the line in the <apiname>Posts_IndexSuccessView</apiname> [<filepath
          >app/modules/Posts/views/IndexSuccessView.class.php</filepath>], which reads
        as:<codeblock outputclass="php">

  $this-&gt;setAttribute('_title', 'Index');

</codeblock>
        As you might already have suspected, it sets a template variable that we use to control the
        displayed title. Don't worry if that seems a little like magic at the moment, we'll show you
        how that works in a little while. For now just change the line to read:
        <codeblock outputclass="php">
  $this-&gt;setAttribute('_title', 'Latest Posts');
</codeblock></p>
      <p>Refresh your browser window, and you should now see the change in the title bar and at the
        top of the page.</p>
      <p>Now that we passed in the information about the posts, we adapt the template to make use of
        this information. As mentioned above, all the attributes we have set will be available in
        the template variable $t in the template. We want to display the posts as a list, so we
        change the template <filepath>app/modules/Posts/templates/IndexSuccess.php</filepath> to
        look like in the following listing:
        <codeblock outputclass="php">
&lt;ul&gt;
&lt;?php foreach ($t['posts'] as $post): ?&gt;
  &lt;li&gt;
    &lt;a href="&lt;?php echo $post['url']; ?&gt;"&gt;&lt;?php echo htmlspecialchars($post['title']); ?&gt;&lt;/a&gt;
    by &lt;?php echo htmlspecialchars($post['author_name']); ?&gt; @ &lt;?php echo $post['posted']; ?&gt; 
    in &lt;?php echo htmlspecialchars($post['category_name']); ?&gt;
  &lt;/li&gt;
&lt;?php endforeach; ?&gt;
&lt;/ul&gt;
</codeblock>
        See how we were able to access the attribute 'posts' that we set earlier on in the action by
        just using <codeph>$t['posts']</codeph>? The PHP Renderer we're using just makes all the
        template variables available as an associative array with their names as key.</p>
      <p>There's a few things to note about that template. See how all output is wrapped in a
          <apiname>htmlspecialchars</apiname> call? We want valid XHTML, so we can't use any of the
        characters that are reserved in HTML. We don't want to escape them before storing the post
        in a database or the like, because maybe we want to generate output that is not html later
        on and then we'd have to decode them again. Neither do we want to have the htmlspecialchars
        call in the view as some templating engines do that implicitly. So converting the special
        chars in the view would make it harder to just swap in a new templating engine. And we don't
        want to use <apiname>htmlentities</apiname> as we're trying to be XML compliant at the same
        time. If you have any special characters like umlauts, just use UTF-8 as charset and the
        regular character. It will save you a lot of hassle later on. If <apiname
          >htmlspecialchars</apiname> is too long to type for you, we recommend having a function
        with a shorter name like <apiname> h()</apiname> or <apiname>hss()</apiname> that just wraps
        the call. For the tutorial, we'll stick with the long version. </p>
    </section>
  </body>
</topic>
