<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="tutorial-adapting-actions">
  <title>Adapting the Actions and Views</title>

  <body>
    <p>There are two changes we need to introduce. First we want our actions
    and views to use the models we created in the last step. Second we should
    move all data retrieval code to the place where it belongs - in the
    Action. Let's start with the Post.Show Action.</p>

    <p>As our Post.IndexAction should respond to GET - Request, we'll need to
    adapt <apiname>executeRead()</apiname> that contains our data retrieval
    logic. Using the Posts_PostManagerModel we created in the last step this
    is very little work:</p>

    <codeblock>&lt;?php

class Posts_IndexAction extends BlogPostsBaseAction
{
	/**
	 * Serves Read (GET) requests
	 * 
	 * @param      AgaviRequestDataHolder the incoming request data
	 * 
	 * @return     mixed &lt;ul&gt;
	 *                     &lt;li&gt;A string containing the view name associated
	 *                     with this action; or&lt;/li&gt;
	 *                     &lt;li&gt;An array with two indices: the parent module
	 *                     of the view to be executed and the view to be
	 *                     executed.&lt;/li&gt;
	 *                   &lt;/ul&gt;
	 */
	public function executeRead(AgaviRequestDataHolder $rd)
	{
		$manager = $this-&gt;getContext()-&gt;getModel('PostManager', 'Posts');
		$this-&gt;setAttribute('posts', $manager-&gt;retrieveLatest(10));
		
		return 'Success';
	}
	
	/**
	 * Returns the default view if the action does not serve the request
	 * method used.
	 *
	 * @return     mixed &lt;ul&gt;
	 *                     &lt;li&gt;A string containing the view name associated
	 *                     with this action; or&lt;/li&gt;
	 *                     &lt;li&gt;An array with two indices: the parent module
	 *                     of the view to be executed and the view to be
	 *                     executed.&lt;/li&gt;
	 *                   &lt;/ul&gt;
	 */
	public function getDefaultViewName()
	{
		return 'Success';
	}
}

?&gt;</codeblock>

    <p>Now we need to adapt the view accordingly:</p>

    <codeblock>&lt;?php

class Posts_IndexSuccessView extends BlogPostsBaseView
{
	public function executeHtml(AgaviRequestDataHolder $rd)
	{
		$this-&gt;setupHtml($rd);

		$ro = $this-&gt;getContext()-&gt;getRouting();
		
		$posts = array();
		
		foreach($this-&gt;getAttribute('posts') as $p)
		{
			$post = $p-&gt;toArray();
			$post['url'] = $ro-&gt;gen('posts.post.show', array('post' =&gt; $p-&gt;getId()));
			$posts[] = $post;
		}
		
		$this-&gt;setAttribute('posts', $posts);
		
		$this-&gt;setAttribute('_title', 'Latest Posts');
	}
}

?&gt;</codeblock>

    <p>Note how we transform the objects we retrieved from our PostManager to
    arrays. While it may seem easier to pass objects to the template it
    removes a lot of flexibilty. Some template engines don't handle objects
    gracefully. There is little added overhead and little code we had to add
    for that as we need to add some information anyways - in our case the url
    to the post detail page. We could have added the url in the PostModels
    toArray() method but that would be bad practice - the url is probably only
    required in this specific context and would be useless clutter in all
    other occasions.</p>

    <p>Let's just go over our Post.Show action and adapt that, using our
    models it will be a breeze:</p>

    <codeblock class="php">class Posts_Post_ShowAction extends BlogPostsBaseAction
{

	public function executeRead(AgaviRequestDataHolder $rd)
	{

		$manager = $this-&gt;getContext()-&gt;getModel('PostManager', 'Posts');
		$this-&gt;setAttribute('post', $manager-&gt;retrieveById($rd-&gt;getParameter('post')));

		return 'Success';
	}

	public function getDefaultViewName()
	{
		return 'Success';
	}
}

class Posts_Post_ShowSuccessView extends BlogPostsBaseView
{
	public function executeHtml(AgaviRequestDataHolder $rd)
	{
		$this-&gt;setupHtml($rd);
		
		$post = $this-&gt;getAttribute('post')-&gt;toArray();
		$this-&gt;setAttribute('post', $post);
		
		$this-&gt;setAttribute('_title', $post['title']);
	}
}

</codeblock>

    <p>And that's it. Now our actions and views are completely decoupled from
    the data retrieval, they don't care about whether data is loaded from a
    flatfile, retrieved from a database, from a webserver or just faked with a
    static array like we do. You can bet that this will come in handy at some
    later point.</p>
  </body>
</topic>
