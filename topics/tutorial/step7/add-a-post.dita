<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="topics-tutorial-adding-a-post">
  <title>Adding a Post</title>

  <body>
    <p>First we need to create a new action, let's name it "Add". We'll need
    three views, "Input" to display the empty form, "Error" in case any
    validation or other error occurs and "Success" for handling any successful
    add to the database.</p>

    <screen>bloggie$ <userinput>dev/bin/agavi action-wizard</userinput>

Module name: <userinput>Posts</userinput>

Action name: <userinput>Add</userinput>

Space-separated list of views to create for Add [Success]: <userinput>Input Success Error</userinput>

bloggie$
</screen>

    <p>This created the action and all three views for us. Next we'll add the
    route so we can reach the action:</p>

    <codeblock outputclass="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ae:configurations xmlns:ae="http://agavi.org/agavi/config/global/envelope/1.0" xmlns="http://agavi.org/agavi/config/parts/routing/1.0"&gt;
  &lt;ae:configuration&gt;
    &lt;routes&gt;
      &lt;!-- matches .rss at the end of the url, strips it, sets the output type to "rss" and continues matching --&gt;
      &lt;route name="ot_rss" pattern=".rss$" cut="true" stop="false" output_type="rss" /&gt;
      
      &lt;!-- default action for "/" --&gt;
      &lt;route name="index" pattern="^/$" module="Posts" action="%actions.default_action%" /&gt;

      &lt;route name="posts" pattern="^/posts" module="Posts"&gt;

        &lt;route name=".create" pattern="^/add$" action="Add" /&gt;

        &lt;route name=".post" pattern="^/(post:\d+)(-{title:[-\w]+})?" action="Post"&gt;
          &lt;callbacks&gt;
            &lt;callback class="PostRoutingCallback" /&gt;
          &lt;/callbacks&gt;
        
          &lt;route name=".show" pattern="^$" action=".Show" /&gt;

        &lt;/route&gt; 
      
      &lt;/route&gt;

    &lt;/routes&gt;
  &lt;/ae:configuration&gt;
&lt;/ae:configurations&gt;</codeblock>

    <p>Now we need to create the input form in
    <filepath>app/modules/Posts/templates/AddInput.php</filepath>. We'll leave
    the posted date out of the form as we'll add that in the code (we do know
    when the post was added) and the authod - this should be handled via
    authentication later:</p>

    <codeblock outputclass="php">&lt;form action="&lt;?php echo $t['target_url']; ?&gt;" method="post"&gt;
  &lt;fieldset&gt;
    &lt;div class="form_row"&gt;
      &lt;label for="input_title"&gt;Title:&lt;/label&gt;
      &lt;input type="text" name="title" id="input_title" /&gt;
    &lt;/div&gt;
    &lt;div class="form_row"&gt;
      &lt;label for="input_content"&gt;Content:&lt;/label&gt;
      &lt;textarea name="content" id="input_content"&gt;&lt;/textarea&gt;
    &lt;/div&gt;
    &lt;div class="form_row"&gt;
      &lt;label for="input_category"&gt;Category:&lt;/label&gt;
      &lt;select name="category" id="input_category"&gt;
        &lt;option value="1"&gt;No category&lt;/option&gt;
        &lt;option value="2"&gt;Agavi&lt;/option&gt;
      &lt;/select&gt;
    &lt;/div&gt;
    &lt;div class="form_row form_row_submit"&gt;
      &lt;button type="submit" class="submit"&gt;Add Post&lt;/button&gt;
    &lt;/div&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;</codeblock>

    <p>and adapt the
    <filepath>app/modules/Posts/views/AddInputView.class.php</filepath> to
    generate the submit url for us:</p>

    <codeblock outputclass="php">&lt;?php

class Posts_AddInputView extends BlogPostsBaseView
{
  public function executeHtml(AgaviRequestDataHolder $rd)
  {
    $this-&gt;setupHtml($rd);

    $ro = $this-&gt;getContext()-&gt;getRouting();

    $this-&gt;setAttribute('target_url', $ro-&gt;gen('posts.create'));
    $this-&gt;setAttribute('_title', 'Add a new Post');
  }
}

?&gt;</codeblock>

    <p>Let's try that. Point your browser to
    http://localhost/bloggie/pub/posts/add. Hmm, blank page. Well, the actions
    <apiname>getDefaultViewName</apiname>() method returns "Success" as
    default view and that's what's getting called - and that's why we don't
    see the form. So let's go and adapt that in
    <filepath>app/modules/Posts/actions/AddAction.class.php</filepath>:</p>

    <codeblock outputclass="php">&lt;?php

class Posts_AddAction extends BlogPostsBaseAction
{
  /**
   * Returns the default view if the action does not serve the request
   * method used.
   *
   * @return     mixed &lt;ul&gt;
   *                     &lt;li&gt;A string containing the view name associated
   *                     with this action; or&lt;/li&gt;
   *                     &lt;li&gt;An array with two indices: the parent module
   *                     of the view to be executed and the view to be
   *                     executed.&lt;/li&gt;
   *                   &lt;/ul&gt;
   */
  public function getDefaultViewName()
  {
    return 'Input';
  }
}

?&gt;</codeblock>

    <p>And now we see our form, as expected.</p>

    <section><title>Validating the Form Data</title><p>A usual we need to
    validate the incoming form data. Let's list our restrictions:</p><ul>
        <li>The title must be a string and must not be longer than 255
        characters or it would not fit in our database field.</li>

        <li>The content must be a string not longer than 65536 characters as
        this is the maximum size for the mysql text column.</li>

        <li>The category field must have a valid id.</li>

        <li>All fields are required.</li>
      </ul><p>Let's forget about the fact that the categories are stored in
    the database and should thus be validated accordingly and just assume that
    for the moment there's only two categories with the ids 1 and 2. We'll be
    using an <apiname>AgaviInarrayValidator</apiname> for the categories field
    and an <apiname>AgaviStringValidator</apiname> for the title and content
    fields. So our validation file in
    <filepath>app/modules/Posts/validate/Add.xml</filepath> would look like
    this:</p><codeblock outputclass="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;ae:configurations
  xmlns="http://agavi.org/agavi/config/parts/validators/1.0"
  xmlns:ae="http://agavi.org/agavi/config/global/envelope/1.0"
  parent="%core.module_dir%/Posts/config/validators.xml"
&gt;
  &lt;ae:configuration&gt;

    &lt;validators&gt;
      &lt;validator class="string"&gt;
        &lt;arguments&gt;
          &lt;argument&gt;title&lt;/argument&gt;
        &lt;/arguments&gt;
        &lt;errors&gt;
          &lt;error&gt;The title field has an invalid value.&lt;/error&gt;
          &lt;error for="required"&gt;Please provide a title.&lt;/error&gt;
          &lt;error for="max_error"&gt;The title must be shorter than 255 characters.&lt;/error&gt;
        &lt;/errors&gt;
        &lt;ae:parameters&gt;
          &lt;ae:parameter name="max"&gt;255&lt;/ae:parameter&gt;
        &lt;/ae:parameters&gt;
      &lt;/validator&gt;

      &lt;validator class="string"&gt;
        &lt;arguments&gt;
          &lt;argument&gt;content&lt;/argument&gt;
        &lt;/arguments&gt;
        &lt;errors&gt;
          &lt;error&gt;The content field has an invalid value.&lt;/error&gt;
          &lt;error for="required"&gt;Please provide a post body.&lt;/error&gt;
          &lt;error for="max_error"&gt;The post body must be shorter than 65536 characters.&lt;/error&gt;
        &lt;/errors&gt;
        &lt;ae:parameters&gt;
          &lt;ae:parameter name="max"&gt;65536&lt;/ae:parameter&gt;
        &lt;/ae:parameters&gt;
      &lt;/validator&gt;

      &lt;validator class="inarray"&gt;
        &lt;arguments&gt;
          &lt;argument&gt;category&lt;/argument&gt;
        &lt;/arguments&gt;
        &lt;errors&gt;
          &lt;error&gt;Please choose a valid category.&lt;/error&gt;
          &lt;error for="required"&gt;Please choose a category.&lt;/error&gt;
        &lt;/errors&gt;
        &lt;ae:parameters&gt;
          &lt;ae:parameter name="values"&gt;
            &lt;ae:parameters&gt;
              &lt;ae:parameter&gt;1&lt;/ae:parameter&gt;
              &lt;ae:parameter&gt;2&lt;/ae:parameter&gt;
            &lt;/ae:parameters&gt;
          &lt;/ae:parameter&gt;
        &lt;/ae:parameters&gt;
      &lt;/validator&gt;
    &lt;/validators&gt;

  &lt;/ae:configuration&gt;
&lt;/ae:configurations&gt;
</codeblock><p>Don't forget that validation only happens if the target action
    handles the request method. So we'll have to add at least a stub
    <apiname>executeWrite</apiname>() method to our action:</p><codeblock
    outputclass="php">&lt;?php

class Posts_AddAction extends BlogPostsBaseAction
{
  /**
   * Serves Write (POST) requests.
   * 
   * @param      AgaviRequestDataHolder the incoming request data
   * 
   * @return     mixed &lt;ul&gt;
   *                     &lt;li&gt;A string containing the view name associated
   *                     with this action; or&lt;/li&gt;
   *                     &lt;li&gt;An array with two indices: the parent module
   *                     of the view to be executed and the view to be
   *                     executed.&lt;/li&gt;
   *                   &lt;/ul&gt;
   */
  public function executeWrite(AgaviRequestDataHolder $rd)
  {
    return 'Success';
  }
  
  /**
   * Returns the default view if the action does not serve the request
   * method used.
   *
   * @return     mixed &lt;ul&gt;
   *                     &lt;li&gt;A string containing the view name associated
   *                     with this action; or&lt;/li&gt;
   *                     &lt;li&gt;An array with two indices: the parent module
   *                     of the view to be executed and the view to be
   *                     executed.&lt;/li&gt;
   *                   &lt;/ul&gt;
   */
  public function getDefaultViewName()
  {
    return 'Input';
  }
}

?&gt;</codeblock></section>

    <section><title>Handling Validation Errors</title><p>The last time we had
    to handle validation erros was when we forwarded to the 404 page when an
    invalid post-id was found in the url to the posts detail page. At that
    time, a forward was the right way to go but in this case we want to
    re-display the form, fill in the data the user provided and insert error
    message where appropriate. All we need to do is re-display our form on the
    error page and the <apiname>AgaviFormPopulationFilter</apiname> will
    perform all of those duties. To re-display the form we could either
    include it in the ErrorViews template or we could set the input template
    in the view. For now we'll just go include the Input template in the error
    template. However, we need to provide the target url from the error view
    as well and while we're at it, let's set a proper title:</p><codeblock
    outputclass="php">&lt;?php

class Posts_AddErrorView extends BlogPostsBaseView
{
  public function executeHtml(AgaviRequestDataHolder $rd)
  {
    $this-&gt;setupHtml($rd);

    $ro = $this-&gt;getContext()-&gt;getRouting();
    
    $this-&gt;setAttribute('target_url', $ro-&gt;gen('posts.create'));
    $this-&gt;setAttribute('_title', 'Add a new Post - Error');
  }
}

?&gt;</codeblock><p>Go ahed, try submitting a post with an empty title but
    fill in some content. You'll see the message "Please provide a title."
    right underneath the title field and the text you provided for the content
    is already filled in. Things could use a little styling but the
    functionality is there. So how did this work? In short words: The
    <apiname>AgaviFormPopulationFilter</apiname> (often called FPF) parse the
    HTML code and finds the form that was submitted. It then inserts the
    values provided by the user and the error messages at the appropriate
    place. We'll see that in more detail a little later, for now just enjoy
    that you didn't have to write a single line of code for
    that.</p></section>

    <section><title>Storing the new Post</title><p>Doing this really properly
    would require a whole set of new models, we'll postpone that to a later
    chapter so that we can keep this chapter within reasonable bounds. For now
    we'll deal with raw ids for the category and the user and format the
    posted date manually - it will still get the post stored. We still need to
    add a set of new properties to the
    <filepath>app/modules/Posts/models/PostModel.class.php</filepath>:</p><ul>
        <li>An author-id</li>

        <li>A category-id</li>

        <li>The respective getters and setters</li>
      </ul><codeblock outputclass="php">&lt;?php

class Posts_PostModel extends BlogPostsBaseModel
{
  ...
  private $categoryId;
  private $authorId;
  ...
 
  public function getCategoryId()
  {
    return $this-&gt;categoryId;
  }
  
  public function setCategoryId($id)
  {
    $this-&gt;categoryId = $id;
  }
  
  ...
  
  public function getAuthorId()
  {
    return $this-&gt;authorId;
  }
  
  public function setAuthorId($id)
  {
    $this-&gt;authorId = $id;
  }
  
  ...
}

?&gt;</codeblock><p>Adding the new properties to the
    <apiname>toArray()</apiname> and <apiname>fromArray()</apiname> methods
    proves a little tedious though. We have take into account that we'll be
    passing partial array sometimes - especially when adding a post, so we'd
    have to surround each element with a condition that checks whether the key
    is set in the incoming array - this makes the whole code bloat. So let's
    go an introduce an array that lists how to map incoming data to
    getters/setters and use that one:</p><codeblock outputclass="php">&lt;?php

class Posts_PostModel extends BlogPostsBaseModel
{
  private $id;
  private $title;
  private $posted;
  private $categoryId;
  private $categoryName;
  private $authorId;
  private $authorName;
  private $content;
  
  protected $fields = array(
    'id' =&gt; 'Id',
    'title' =&gt; 'Title',
    'posted' =&gt; 'Posted',
    'category_id' =&gt; 'CategoryId',
    'category_name' =&gt; 'CategoryName',
    'author_id' =&gt; 'AuthorId',
    'author_name' =&gt; 'AuthorName',
    'content' =&gt; 'Content',
  );
  
....
  
  public function fromArray(array $data)
  {
    foreach($data as $key =&gt; $value) {
      if(isset($this-&gt;fields[$key])) {
        $setter = 'set' . $this-&gt;fields[$key];
        $this-&gt;$setter($value);
      }
    }
  }
  
  public function toArray()
  {
    $data = array();

    foreach($this-&gt;fields as $key =&gt; $getter) {
      $getter = 'get'.$getter;
      $data[$key] = $this-&gt;$getter();
    }
    
    return $data;
  }
}

?&gt;</codeblock><p>While this does puts some contraints on the naming of
    getters and setters, it works like a charm and reduces code massively. The
    next thing we'll need to do is teach our
    <apiname>Posts_PostManagerModel</apiname> in
    <filepath>app/modules/Posts/Models/PostManager.class.php</filepath> how to
    store a new post:</p><codeblock outputclass="php">&lt;?php

class Posts_PostManagerModel extends BlogPostsBaseModel
{

  ...

  public function storeNew(Posts_PostModel $post)
  {
    $con = $this-&gt;getContext()-&gt;getDatabaseManager()-&gt;getDatabase()-&gt;getConnection();
    
    $sql = 'INSERT INTO
  posts
(
  title,
  category_id,
  content,
  posted,
  author_id
)
VALUES
(
  ?,
  ?,
  ?,
  NOW(),
  ?
)';

    $stmt = $con-&gt;prepare($sql);
    
    $stmt-&gt;bindValue(1, $post-&gt;getTitle(), PDO::PARAM_STR);
    $stmt-&gt;bindValue(2, $post-&gt;getCategoryId(), PDO::PARAM_INT);
    $stmt-&gt;bindValue(3, $post-&gt;getContent(), PDO::PARAM_STR);
    $stmt-&gt;bindValue(4, $post-&gt;getAuthorId(), PDO::PARAM_INT);
    
    $stmt-&gt;execute();
    
    return $con-&gt;lastInsertId();
  }
  
}

?&gt;</codeblock><p>Now we adapt the action to store the post - we retrieve
    the post from the database after storing it to get the default values
    added by the database itself. </p><codeblock>&lt;?php

class Posts_AddAction extends BlogPostsBaseAction
{
  /**
   * Serves Write (POST) requests.
   * 
   * @param      AgaviRequestDataHolder the incoming request data
   * 
   * @return     mixed &lt;ul&gt;
   *                     &lt;li&gt;A string containing the view name associated
   *                     with this action; or&lt;/li&gt;
   *                     &lt;li&gt;An array with two indices: the parent module
   *                     of the view to be executed and the view to be
   *                     executed.&lt;/li&gt;
   *                   &lt;/ul&gt;
   */
  public function executeWrite(AgaviRequestDataHolder $rd)
  {
    $ctx = $this-&gt;getContext();
    
    $data = array(
      'title' =&gt; $rd-&gt;getParameter('title'),
      'content' =&gt; $rd-&gt;getParameter('content'),
      'category_id' =&gt; $rd-&gt;getParameter('category'),
      'author_id' =&gt; 1, // let's bind that to a fixed value for the moment
    );
    
    $post = $ctx-&gt;getModel('Post', 'Posts', array($data));
    $postManager = $ctx-&gt;getModel('PostManager', 'Posts');
    
    $postId = $postManager-&gt;storeNew($post);
    
    // we need a post with at least and id and a title to create an url
    // so we reload the post from the database
    
    $post = $postManager-&gt;retrieveById($postId);
    
    $this-&gt;setAttribute('post', $post);
    
    return 'Success';
  }
  
  /**
   * Returns the default view if the action does not serve the request
   * method used.
   *
   * @return     mixed &lt;ul&gt;
   *                     &lt;li&gt;A string containing the view name associated
   *                     with this action; or&lt;/li&gt;
   *                     &lt;li&gt;An array with two indices: the parent module
   *                     of the view to be executed and the view to be
   *                     executed.&lt;/li&gt;
   *                   &lt;/ul&gt;
   */
  public function getDefaultViewName()
  {
    return 'Input';
  }
}

?&gt;</codeblock></section>

    <section><title>Redirecting on Success</title><p>After we've successfully
    stored the post we should redirect to a new page - we could have a
    completely new page saying "Thanks, your post has been added." but the
    posts detail page will serve our purpose just as well. So let's add the
    redirect to
    <filepath>app/modules/Posts/views/AddSuccessView.class.php</filepath>:</p><codeblock
    outputclass="php">&lt;?php

class Posts_AddSuccessView extends BlogPostsBaseView
{
  public function executeHtml(AgaviRequestDataHolder $rd)
  {
    $url = $this-&gt;getContext()-&gt;getRouting()-&gt;gen('posts.post.show', array('post' =&gt; $this-&gt;getAttribute('post')));
    
    $this-&gt;getResponse()-&gt;setRedirect($url);
  }
}

?&gt;</codeblock><p>And with this, we're done. We could add some buttons but
    we'll to that later when we've added some security so that only admins can
    access the page.</p></section>
  </body>
</topic>
