<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
"http://docs.oasis-open.org/dita/dtd/concept.dtd">
<concept id="basics-output-types">
  <title>Output Types</title>
  <conbody>
    <p>Output types is Agavi's way of dealing with the requirement of having multiple presentation
      formats for a ressource. For example, a list of items could be delivered to the client as a
      regular plain HTML list, a json serialized array of objects, as a SOAP response or even
      rendered as an image or chart if required.</p>
    <p>Output types are configured in <filepath>app/config/output_types.xml</filepath>. An output
      type configuration can specify a variety of parameters:</p>
    <ul>
      <li>A name. Each output type must have a unique name.</li>
      <li>A set of HTTP headers to send with the response, most notably the content-type header.
        These headers can be overwritten later but it's still good practice to define a reasonable
        default set.</li>
      <li>A specific exeption template to use in case an uncaught exception occurs.</li>
      <li>A renderer configuration, including the renderer to use and any parameters required for
        rendering.</li>
      <li>Any number of preconfigured layouts.</li>
    </ul>
    <p>Except for the output type name, all of these parameters are optional. There's quite a few
      output types where using a renderer wouldn't make sense, for example a json serialized
      response.</p>
    <p>Let's have a look at the stock HTML output type from the standard generated application:</p>
    <codeblock outputclass="xml">...
&lt;output_types default="html"&gt;
  
  &lt;output_type name="html" exception_template="%core.template_dir%/exceptions/web-html.php"&gt;
    
    &lt;renderers default="php"&gt;
      &lt;renderer name="php" class="AgaviPhpRenderer"&gt;
        &lt;ae:parameter name="assigns"&gt;
          &lt;ae:parameter name="routing"&gt;ro&lt;/ae:parameter&gt;
          &lt;ae:parameter name="request"&gt;rq&lt;/ae:parameter&gt;
          &lt;ae:parameter name="controller"&gt;ct&lt;/ae:parameter&gt;
          &lt;ae:parameter name="user"&gt;us&lt;/ae:parameter&gt;
          &lt;ae:parameter name="translation_manager"&gt;tm&lt;/ae:parameter&gt;
          &lt;ae:parameter name="request_data"&gt;rd&lt;/ae:parameter&gt;
        &lt;/ae:parameter&gt;
        &lt;ae:parameter name="default_extension"&gt;.php&lt;/ae:parameter&gt;
        &lt;!-- this changes the name of the variable with all template attributes from the default $template to $t --&gt;
        &lt;ae:parameter name="var_name"&gt;t&lt;/ae:parameter&gt;
      &lt;/renderer&gt;
    &lt;/renderers&gt;
    
    &lt;layouts default="standard"&gt;
      &lt;!-- standard layout with a content and a decorator layer --&gt;
      &lt;layout name="standard"&gt;
        &lt;!-- content layer without further params. this means the standard template is used, i.e. the one with the same name as the current view --&gt;
        &lt;layer name="content" /&gt;
        &lt;!-- decorator layer with the HTML skeleton, navigation etc; set to a specific template here --&gt;
        &lt;layer name="decorator"&gt;
          &lt;ae:parameter name="directory"&gt;%core.template_dir%&lt;/ae:parameter&gt;
          &lt;ae:parameter name="template"&gt;Master&lt;/ae:parameter&gt;
          &lt;slots&gt;
            &lt;slot name="navigation" module="Widgets" action="Navigation" /&gt;
            &lt;slot name="header" module="Widgets" action="Header" /&gt;
            &lt;slot name="footer" module="Widgets" action="Footer" /&gt;
            &lt;slot name="dashboard" module="Widgets" action="Dashboard" /&gt;
            &lt;slot name="sidebar" module="Widgets" action="Sidebar" /&gt;  
          &lt;/slots&gt;
        &lt;/layer&gt;
      &lt;/layout&gt;
      
      &lt;!-- another example layout that has an intermediate wrapper layer in between content and decorator --&gt;
      &lt;!-- it also shows how to use slots etc --&gt;
      &lt;layout name="wrapped"&gt;
        &lt;!-- content layer without further params. this means the standard template is used, i.e. the one with the same name as the current view --&gt;
        &lt;layer name="content" /&gt;
        &lt;layer name="wrapper"&gt;
          &lt;!-- use CurrentView.wrapper.php instead of CurrentView.php as the template for this one --&gt;
          &lt;ae:parameter name="extension"&gt;.wrapper.php&lt;/ae:parameter&gt;
        &lt;/layer&gt;
        &lt;!-- decorator layer with the HTML skeleton, navigation etc; set to a specific template here --&gt;
        &lt;layer name="decorator"&gt;
          &lt;ae:parameter name="directory"&gt;%core.template_dir%&lt;/ae:parameter&gt;
          &lt;ae:parameter name="template"&gt;Master&lt;/ae:parameter&gt;
          &lt;!-- an example for a slot --&gt;
          &lt;slot name="nav" module="Default" action="Widgets.Navigation" /&gt;
        &lt;/layer&gt;
      &lt;/layout&gt;
      
      &lt;!-- special layout for slots that only has a content layer to prevent the obvious infinite loop that would otherwise occur if the decorator layer has slots assigned in the layout; this is loaded automatically by ProjectBaseView::setupHtml() in case the current container is run as a slot --&gt;
      &lt;layout name="slot"&gt;
        &lt;layer name="content" /&gt;
      &lt;/layout&gt;
    &lt;/layouts&gt;
    
    &lt;ae:parameter name="http_headers"&gt;
      &lt;ae:parameter name="Content-Type"&gt;text/html; charset=UTF-8&lt;/ae:parameter&gt;
    &lt;/ae:parameter&gt;
    
  &lt;/output_type&gt;

&lt;/output_types&gt;
...</codeblock>
    <p>We've already had a look at the layout definition so we'll skip that at this point. Please
      refer to the chapter about layouts. The parameter <varname>exception_template</varname> sets a
      specific exception template for this output type. <note type="caution">You should use a custom
        exception template - and if you do so double check that it's sending a correct 500 Internal
        Server Error status code. You don't want your error page to end up in caches or even worse
        on google.</note> The section <codeph>&lt;renderers&gt;</codeph> specifies a list of
      renderers:</p>
    <codeblock outputclass="xml">&lt;renderers default="php"&gt;
  &lt;renderer name="php" class="AgaviPhpRenderer"&gt;
    &lt;ae:parameter name="assigns"&gt;
      &lt;ae:parameter name="routing"&gt;ro&lt;/ae:parameter&gt;
      &lt;ae:parameter name="request"&gt;rq&lt;/ae:parameter&gt;
      &lt;ae:parameter name="controller"&gt;ct&lt;/ae:parameter&gt;
      &lt;ae:parameter name="user"&gt;us&lt;/ae:parameter&gt;
      &lt;ae:parameter name="translation_manager"&gt;tm&lt;/ae:parameter&gt;
      &lt;ae:parameter name="request_data"&gt;rd&lt;/ae:parameter&gt;
    &lt;/ae:parameter&gt;
    &lt;ae:parameter name="default_extension"&gt;.php&lt;/ae:parameter&gt;
    &lt;!-- this changes the name of the variable with all template attributes from the default $template to $t --&gt;
    &lt;ae:parameter name="var_name"&gt;t&lt;/ae:parameter&gt;
  &lt;/renderer&gt;
&lt;/renderers&gt;</codeblock>
    <p>This specifies a single renderer named "php" that uses the default <apiname
      >AgaviPhpRenderer</apiname>. This renderer is the default renderer used. The <codeph>&lt;assigns&gt;</codeph> tag controls
      which internal objects are available in the template and their respective variable name. The
      parameter named <varname>default_extension</varname> sets the expected template extension to ".php". The
      <varname>var_name</varname> parameter controls the name of the template variable.</p>
    <p>Then there's the last section named "http_headers":</p>
    <codeblock outputclass="xml">&lt;ae:parameter name="http_headers"&gt;
  &lt;ae:parameter name="Content-Type"&gt;text/html; charset=UTF-8&lt;/ae:parameter&gt;
&lt;/ae:parameter&gt;
</codeblock>
    <p>This section contains a list of default HTTP headers to send. In most cases it's reasonable
      to at least list a default content-type header here.</p>
    <section>
      <title>Rendering for a specific output type</title>
      <p>The framework calls a method named execute&lt;OutputTypeName&gt; on the view to render. So
        for an HTML output type the method <apiname>executeHtml()</apiname> is called on a view, for a JSON output
        type <apiname>executeJson()</apiname> etc. The method can either return a valid response content or set up
        layers to render or even both. Valid response content may be</p>
      <ul>
        <li>A string.</li>
        <li>An open file pointer. Agavi will stream the contents of that file to the user with the
          most efficient method available.</li>
      </ul>
    </section>
    <section>
      <title>Using a specific output type</title>
      <p>The output type to use can either be set on the container using the <apiname
          >setOutputType</apiname> method, by passing an output type name to <apiname
          >createSlotContainer()</apiname> when creating a slot, by passing the output type to
          <apiname>createForwardContainer()</apiname> when doing an internal forward or by the
        routing.</p>
      <p>The any route can use the "output_type" attribute to set the active output type. A standard
        example is setting output types based on the file extension using a non-stopping route:</p>
      <codeblock outputclass="xml"> &lt;route name="ot_xml" pattern=".xml$" cut="true" output_type="xml" /&gt;</codeblock>
      <p>This route would match any url ending in ".xml", strip the extension, set the output type
        to "xml" and then continue processing. The output type must be configured to to use this
        facility.</p>
    </section>
  </conbody>
</concept>
