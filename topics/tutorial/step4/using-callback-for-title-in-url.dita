<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="using-callbacks-for-title-in-url">
  <title>Using Callbacks for the Title in URLs</title>

  <body>
    <p>We can use a RoutingCallback's onGenerate method to factor out the code
    needed to generate a URL for the post's detail page. We'll just pass the
    PostModel in and the callback takes care of extracting the id and the
    title for the url. Let's create a callback in
    <filepath>app/modules/Posts/lib/routing/PostRoutingCallback.class.php</filepath>.</p>

    <codeblock class="php">&lt;?php

class PostRoutingCallback extends AgaviRoutingCallback
{
	/**
	 * Gets executed when the route of this callback is about to be reverse 
	 * generated into an URL.
	 *
	 * @param      array The default parameters stored in the route.
	 * @param      array The parameters the user supplied to AgaviRouting::gen().
	 * @param      array The options the user supplied to AgaviRouting::gen().
	 *
	 * @return     bool  Whether this route part should be generated.
	 */
	public function onGenerate(array $defaultParameters, array &amp;$userParameters, array &amp;$userOptions)
	{
		$post = $userParameters['post']-&gt;getValue();
		
		$routing = $this-&gt;getContext()-&gt;getRouting();
		
		$userParameters['post'] = $routing-&gt;createValue($post-&gt;getId());
		$userParameters['title'] = $routing-&gt;createValue(preg_replace('/\W/', '-', $post-&gt;getTitle()));
		
		return true;
	}
}

?&gt;</codeblock>

    <p>Now we need to pass a PostModel instead of id and title in out
    IndexSuccessView:</p>

    <codeblock>&lt;?php

class Posts_IndexSuccessView extends BlogPostsBaseView
{
	
	public function executeHtml(AgaviRequestDataHolder $rd)
	{
		$this-&gt;setupHtml($rd);
		$ro = $this-&gt;getContext()-&gt;getRouting();

		$this-&gt;setAttribute('_title', 'Latest Posts');
		
		
		$posts = array();
		
		foreach($this-&gt;getAttribute('posts') as $p)
		{
			$post = $p-&gt;toArray();
			$post['url'] = $ro-&gt;gen(
				'posts.post.show', 
				array(
					'post' =&gt; $p
				)
			);
			
			$posts[] = $post;
		}
		
		$this-&gt;setAttribute('posts', $posts);
	}
}

?&gt;</codeblock>

    <p>and that's it. Now the no part of the application itself needs to know
    about how the urls to the posts are contructed and which parameters are
    required. That's all nicely encapsulated in the routing.</p>
  </body>
</topic>
