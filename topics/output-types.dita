<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="output-types">
  <title>How output types work</title>
  <body>
    <p>
      An output type is a collection of configuration settings that
      describes how various framework components behave when Agavi is
      composing a response in given output mode. Output types are
      configured
      in <filepath>app/config/output_types.xml</filepath>. An
      application may define any output type, e.g. HTML, JSON, plain
      text, CSV, XLS files, PDF files, dynamically generated
      stylesheets or Javascript and so on.
    </p>
    <section>
      <title>How Agavi uses the output type configuration</title>
      <p>Agavi Views use the configuration items from a specific
      output type. For example, you could define a "pdf" output type
      that corresponds to PDF generation. The output type
      configuration file allows you to specify the defaults that your
      Views will use when invoked in PDF mode (e.g. Agavi
      calls their <apiname>executePdf</apiname>() method).</p>
      <p>Output type configuration can be used to define the following things:</p>
      <dl>
	<dlentry>
	  <dt>Layouts</dt>
	  <dd>A View's Layout is a list of Layers, templates and
	  renderers that Agavi should render after the View's
	  execution. Different Layouts can be configured and a View
	  can load any of them. You can also specify which Layout is
	  default in this output type.</dd>
	</dlentry>
	<dlentry>
	  <dt>Renderer configuration</dt>
	  <dd>Configuration parameters for Renderer classes applied
	  during Renderer creation in this output type. Default
	  Renderer class is also configurable.</dd>
	</dlentry>
	<dlentry>
	  <dt>Exception template</dt>
	  <dd>You can specify the emergency template that is to be
	  rendered if an unhandled exception occurs, substituting the
	  output of a failed Action.</dd>
	</dlentry>
	<dlentry>
	  <dt>HTTP headers</dt>
	  <dd>You can define default HTTP headers for a given output
	  type, so that Agavi automatically adds them to any output
	  generated in this output type.</dd>
	</dlentry>
      </dl>
    </section>
    <section>
      <title>XML configuration example</title>
      <note type="tip">A stock Agavi application comes preconfigured
	with a default output type "html". Examine the output type
	configuration file to see what kind of settings can be
	defined.</note>
      <p>
	Output type configuration defines various details of the
	output composition process, from desired HTTP response headers
	to the names of adapter classes that perform rendering. For
	now, we will keep working with our HTML output type, and later
	we'll add an RSS output type to export our blog post
	feeds. Here's an example output type configuration from stage
	2:
      </p>
      <codeblock conref="examples/examples.xml#output-types-simple-example"
      class="xml"/>
      <p>
	This example shows a configuration with a single output type
	for HTML that has only one layout. In this layout, a single
	Layer is declared. All views that use this configuration when
	composing HTML output will thus have a single Layer at their
	disposal.
      </p>
      </section>
  </body>
</topic>
