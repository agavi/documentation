<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN"
"http://docs.oasis-open.org/dita/dtd/topic.dtd">
<topic id="basic-forms">
  <title>Handling form submission</title>
  <body>
    <p>An Agavi Action is multi-headed; that is, it can respond to
    more than one request method. A typical simple Web application
    only relies on HTTP GET and POST methods for all its user
    interaction, but sometimes other verbs may come handy.</p>
    <p>The Agavi Controller, which is responsible for handling the
    HTTP requests, maintains an internal list which maps the named
    HTTP verbs (e.g. GET, POST, PUT, etc) to Agavi method names. GET
    is mapped to "read" and POST is mapped to "write"; so, when an
    Action is invoked over HTTP with a POST request method,
    its <apiname>executeWrite</apiname> method is going to be called
    by Agavi.</p>
    <p>What this means in practice is that an Action can be used to
    implement UI procedures that consist of a number of steps or
    handle different conditions. Let's see how this works in practice
    by allowing our readers to submit comments to our Bloggie posts.</p>
    <p>To achieve this, we're going to use various Agavi techniques:
      <ul>
	<li><keyword>Slots</keyword> are used to embed an Action's
	output into a given place in the template. We're going to use
	them to display the comments inside a post page, and to
	display the form used to submit these comments</li>
	<li><keyword>Validation</keyword> is used to ensure that
	user-submitted data obeys specified laws. We'll use it to make
	sure that the comments our readers submit are safe.</li>
	<li><keyword>Action methods</keyword> specify how an Action
	responds to a certain HTTP verb</li>
      </ul>
    </p>
  </body>
</topic>
