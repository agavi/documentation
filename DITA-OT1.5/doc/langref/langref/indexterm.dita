<?xml version="1.0" encoding="utf-8"?>
<!--Arbortext, Inc., 1988-2006, v.4002-->
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "reference.dtd">
<reference id="indexterm" rev="1.1" xml:lang="en-us">
<title>indexterm</title>
<shortdesc>An &lt;<keyword>indexterm</keyword>&gt; element allows the author
to indicate that a certain word or phrase should produce an index entry in
the generated index.</shortdesc>
<prolog><metadata>
<keywords><indexterm>indexterm</indexterm><indexterm>Miscellaneous elements<indexterm>indexterm</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section><p>The content of an &lt;indexterm&gt; element is used to produce
an index entry in the generated index. You can nest indexterm elements to
create multi-level indexes. The content is not output as part of topic content,
only as part of the index.</p><p>An &lt;indexterm&gt; element (with no start
or end attribute specified) is interpreted as a point reference that will
contribute the number of the current page to an index entry whose contents
is the content of the indexterm. All indexterms with the same content are
"merged" to form a single index entry in the resulting index, and all contributed
page numbers are included in that index entry.</p><p>In the case of nested
indexterms, the indexterms with no indexterm children (i.e., the "leaves")
each contribute a page number to the generated index; the ancestral indexterm
elements for each leaf indexterm provide the higher levels for the multilevel
entry for which the leaf indexterm is the lowest level.</p><p>An indexterm
that occurs in a topic prolog is interpreted as a point reference to the start
of the title of the topic.</p><p>It is an error if an indexterm containing
no indexterm children  contains both an index-see and an index-see-also. 
(Note: index-see and index-see-also elements within indexterms that do contain
indexterm children are ignored.)  In the case of this error condition, an
implementation may (but need  not) give an error message, and may (but need
not) recover  by treating all such index-see elements as index-see-also  elements.</p></section>
<section><p>The start and end attribute on indexterm can be used in cases
where one wishes to index an extended discussion that may continue over a
number of pages. The start of a range is indicated by an indexterm with a
start attribute. The end of a range is indicated with an indexterm with an
end attribute whose value matches that of the start attribute on the start
of range indexterm. Such markup would contribute to the generated index a
page range covering all pages in the index range. </p><p>The end of range
indexterm should have no content of its own; any content it has is ignored.
There is no reason for the end of range indexterm to have any indexterm ancestors;
however, an implementation should be able to handle an end of range indexterm
nested within one or more indexterms.</p><p>The start and end attributes are
defined as CDATA, though it is recommended that the values should not contain
any whitespace characters (e.g., space, tab) or control characters. Matching
of start and end attributes is done as a character by character comparison
with all characters significant and no case folding occurring. The start and
end attributes are ignored unless they occur on an indexterm element that
has no child indexterm elements (i.e., a leaf indexterm).</p><p>Index range
indications may occur in the topicmeta of a topicref at the map level, in
the prolog of a topic, or in the body of a topic, and are interpreted as follows:<ul>
<li>In a map, the start range points to the start of the topic title of the
topic being referenced by its containing topicref. The end range points to
the end of the final child contained by the topic being referenced by its
containing topicref, or to the end of the final topic referenced by th<?Pub Caret?>e
current map (whichever comes first). When a start and end range occur in the
same topicmeta, the range applies to the containing topicref and its children.</li>
<li>In a prolog, the start range points to the start of the containing topic's
title. The range ends with a matching index range end in the same prolog,
or the end of the prolog, whichever comes first. The range applies to the
containing topic and all its children including child relationships defined
in a map.</li>
<li>In a body, the range starts where the start indexterm occurs and ends
at the matching index range end indication within the same body, or at the
end of the body, whichever comes first. Such an index range does not span
sub-topics of the topic.</li>
</ul></p><p>When index ranges with the same identifier overlap, the widest
range applies, and end ranges are matched with start ranges by last-in-first-out.
In other words, the ranges are interpreted as nested rather than overlapping
with the highest-level container taking precedence over narrower contained
ranges.</p><p>As defined above, there is no such thing as an index range start
that isn't terminated by either a matching end or some maximum scope. There
can, however, be unmatched index range end indications; these should be ignored.</p></section>
<example><title>Example</title><codeblock>&lt;p&gt;An indexterm element allows the author to indicate that
a certain word or phrase should produce an index entry in the
generated index. You can nest indexterm elements to create
multi-level indexes.&lt;indexterm&gt;indexterm&lt;/indexterm&gt;
&lt;indexterm&gt;Valid in Many Places elements&lt;indexterm&gt;indexterm&lt;/indexterm&gt;
&lt;/indexterm&gt;&lt;/p&gt;</codeblock><p>Markup such as <codeblock>&lt;indexterm&gt;cheese
  &lt;indexterm&gt;sheeps milk
    &lt;indexterm&gt;pecorino&lt;/indexterm&gt;
  &lt;/indexterm&gt;
  &lt;indexterm&gt;goats milk
    &lt;indexterm&gt;chevre&lt;/indexterm&gt;
  &lt;/indexterm&gt;
&lt;/indexterm&gt;</codeblock>would be equivalent to<codeblock>&lt;indexterm&gt;cheese
  &lt;indexterm&gt;sheeps milk
    &lt;indexterm&gt;pecorino&lt;/indexterm&gt;
  &lt;/indexterm&gt;
&lt;/indexterm&gt;
&lt;indexterm&gt;cheese
  &lt;indexterm&gt;goats milk
    &lt;indexterm&gt;chevre&lt;/indexterm&gt;
  &lt;/indexterm&gt;
&lt;/indexterm&gt;</codeblock>and would be part of the input that might generate
resulting index entries such as<ul>
<li>cheese<ul>
<li>goats milk<ul>
<li>chevre 14</li>
</ul></li>
</ul><ul>
<li>sheeps milk<ul>
<li>pecorino 14</li>
</ul></li>
</ul></li>
</ul></p><p>Markup such as <codeblock>&lt;indexterm&gt;cheese
  &lt;indexterm&gt;sheeps milk
    &lt;indexterm start="level-3-pecorino"&gt;pecorino&lt;/indexterm&gt;
  &lt;/indexterm&gt;
&lt;/indexterm&gt;
 . . .
&lt;indexterm end="level-3-pecorino"/&gt;</codeblock>(where the ellipses represent
several pages worth of input) might generate an index entry such as<ul>
<li>cheese<ul>
<li>sheeps milk<ul>
<li>pecorino 18-24</li>
</ul></li>
</ul></li>
</ul></p></example>
<section conref="../common/commonNavLibraryTable.dita#models/indexterm-contains" otherprops="contains"></section>
<section conref="../common/commonNavLibraryTable.dita#models/indexterm-containedby"
otherprops="containedby"></section>
<section conref="../common/commonNavLibraryTable.dita#models/indexterm-classvalue"
otherprops="classvalue"></section>
<section id="attrs"><title>Attributes</title> <simpletable id="indexterm_attr"
relcolwidth="2* 3* 1* 1* 1*">
<sthead>
<stentry>Name</stentry>
<stentry>Description</stentry>
<stentry>Data Type</stentry>
<stentry>Default Value</stentry>
<stentry>Required?</stentry>
</sthead>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/start">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/end">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/univ-atts">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/global-atts">
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
<stentry></stentry>
</strow>
<strow conref="../common/commonLRdefs.dita#commonLRdefs/classandkey"><stentry/><stentry/><stentry/><stentry/><stentry/></strow>
</simpletable> </section>
</refbody>
</reference>
<?Pub *0000008627?>
