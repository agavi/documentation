<?xml version="1.0" encoding="UTF-8"?> 
<!-- (c) Copyright 2009 the agavi project. --> 
<!-- Ant script for the agavi guide --> 
<!-- Depending on the argument passed to the script at runtime, 
this script processed to one (example: dita2xhtml), multiple, or all output targets. --> 

<!-- This is a "user script," meant to be modified. 
However, be cautious in modifying the environment initialization section. --> 
<!-- --> 
<!-- ENVIRONMENT INITIALIZATION SECTION --> 
<!-- --> 
<!-- The project name is agavi guide.The default output target is xhtml. --> 
<project name="guide" default="xhtml" basedir="."> 

	<echo> </echo> 
	<echo>Building the agavi guide. Please stand by...</echo> 
	<echo> </echo> 

	<!-- Allow the build process access to environment variables --> 
	<property environment="env"/> 
	<!-- Set toolkit directory from environment variable --> 
	<property name="toolkit_dir" value="${env.DITA_DIR}"/> 

	<import file="${toolkit_dir}${file.separator}build_dita2xhtml.xml"></import>

	<!-- Define the location of the project (source file) directory before overwriting basedir.-->
	<property name="projdir" value="${basedir}/.."/> 
	
	<!-- Note: basedir may be set in a higher-level script that invokes this one. 
	Some plug-ins depend on its pointing to the Toolkit directory. 
	In particular, the Idiom plug-in, which is required for PDF2 processing, requires it. --> 
	<property name="basedir" value="${env.DITA_DIR}"/> 

	<!-- Define the location of the output directory. 
	 In this case, it is a directory directly above the project (source file) directory. --> 
	<property name="outdir" value="${projdir}/output"/>
	<property name="args.logdir" value="${outdir}"/> 

	<!-- Set the name of the (master) ditamap --> 
	<!-- --> 
	<!-- To process using a different map, you need to change the following value --> 
	<!-- --> 
	<property name="MAP_file" value="${projdir}/tutorial.ditamap"/> 

	<!-- Set the extension string for the dita files (files can also be .xml) --> 
	<property name="EXTNAME" value=".dita"/> 

	<!-- Define the path to the Java code --> 
	<path id="dost.class.path"> 
		<pathelement location="${toolkit_dir}${file.separator}lib${file.separator}dost.jar"/> 
	</path>
 
	<echo> </echo> 
	<echo>${toolkit_dir}${file.separator}lib${file.separator}dost.jar</echo> 
	<echo> </echo>
	
	<!-- Define the Ant targets and initialize the DITA processing environment --> 
	<taskdef name="integrate" classname="org.dita.dost.platform.IntegratorTask"> 
		<classpath refid="dost.class.path"/> 
	</taskdef> 

	<!-- Create the default XHTML output and debug cross-reference --> 
	<target name="xhtml" depends="integrate, create-xhtml-file-structure"> 
	</target> 

	<target name="website" depends="integrate, create-website-structure">
	</target>
	
	<target name="pdf" depends="integrate, dita2pdf2"> 
	</target>

	<target name="integrate"> 
		<integrate ditadir="${toolkit_dir}"/> 
	</target>
	
	<target name="init">
		<property name="project" value="irv" />
		<tstamp/>
		<property name="now" value="${DSTAMP}-${TSTAMP}" />
		<property name="tarball.tar" value="${project}-${now}.tar" />  
		<property name="tarball.tar.gz" value="${tarball.tar}.gz" />
	</target>

	<!-- --> 
	<!-- BEGIN INSTANCE PROCESSING SECTION --> 
	<!-- --> 
	<!-- Names of the output types this script is capable of producing --> 
	<!-- The target names are somewhat arbitrary.The following are traditional, 
	and they allude to the source and target (for example, dita2xhtml). --> 
	<!-- JavaHelp and PDF (using FOP) are not included in this list, because they don't work in Toolkit 1.3.1! --> 

	<target name="alltargets" depends="integrate, dita2xhtml, dita2htmlhelp, dita2pdf2, dita2eclipsecontent, dita2eclipsehelp"> 
	</target> 

	<!-- Handy abbreviation (all) for alltargets --> 
	<target name="all" depends="alltargets"/> 

	<!-- Create xhtml output (unfiltered) --> 
	<target name="dita2xhtml"> 
		<ant antfile="${toolkit_dir}${file.separator}conductor.xml" target="init"> 
			<property name="args.input" value="${MAP_file}"/> 
			<property name="output.dir" value="${outdir}/xhtml"/> 
			<property name="dita.temp.dir" value="${outdir}/temp"/> 
			<property name="transtype" value="xhtml"/> 
			<property name="args.draft" value="yes"/> 
			<property name="args.indexshow" value="yes"/>
			<property name="args.xhtml.toc" value="toc"/> 
			<property name="args.xsl" value="${toolkit_dir}${file.separator}xsl${file.separator}dita2xhtml_custom.xsl" />
			<property name="args.hdf" value="${projdir}/build/xhtml/head.tpl" />
			<property name="args.hdr" value="${projdir}/build/xhtml/header.tpl" />
			<property name="args.ftr" value="${projdir}/build/xhtml/footer.tpl" />
			<property name="dita.extname" value="${EXTNAME}"/>
			<property name="args.xhtml.toc.class" value="" />
		</ant>
	</target>
	
	<!-- Create xhtml output (unfiltered) --> 
	<target name="dita2website"> 
		<ant antfile="${toolkit_dir}${file.separator}conductor.xml" target="init"> 
			<property name="args.input" value="${MAP_file}"/> 
			<property name="output.dir" value="${outdir}/website-tmp"/> 
			<property name="dita.temp.dir" value="${outdir}/temp"/> 
			<property name="transtype" value="xhtml"/> 
			<property name="args.draft" value="yes"/> 
			<property name="args.indexshow" value="yes"/>
			<property name="args.xhtml.toc" value="toc"/> 
			<property name="args.xsl" value="${toolkit_dir}${file.separator}xsl${file.separator}dita2xhtml_website.xsl" />
			<property name="dita.extname" value="${EXTNAME}"/>
			<property name="args.xhtml.toc.class" value="thirdlevel left" />
			<property name="args.xhtml.toc.xsl" value="${dita.script.dir}${file.separator}map2xhtmtoc_website.xsl" />
		</ant>
	</target>

	<!-- Create htmlhelp output -->
	<target name="dita2htmlhelp">
		<ant antfile="${toolkit_dir}${file.separator}conductor.xml" target="init"> 
			<property name="args.input" value="${projdir}/${MAP_file}"/> 
			<property name="output.dir" value="${outdir}/htmlhelp"/> 
			<property name="dita.temp.dir" value="${outdir}/temp"/> 
			<property name="transtype" value="htmlhelp"/> 
			<property name="args.draft" value="yes"/> 
			<property name="args.indexshow" value="yes"/> 
			<property name="dita.extname" value="${EXTNAME}"/> 
		</ant> 
	</target>

	<!-- Create idiom fo pdf2 output --> 
	<target name="dita2pdf2">
		<ant antfile="${toolkit_dir}${file.separator}conductor.xml" target="init"> 
			<property name="args.input" value="${MAP_file}"/> 
			<property name="output.dir" value="${outdir}/pdf2"/> 
			<property name="dita.temp.dir" value="${outdir}/temp"/> 
			<property name="transtype" value="pdf2"/> 
			<property name="args.draft" value="yes"/> 
			<property name="args.indexshow" value="yes"/> 
			<property name="dita.extname" value="${EXTNAME}"/> 
		</ant>
	</target>

	<!-- Create eclipsecontent output --> 
	<target name="dita2eclipsecontent"> 
		<ant antfile="${toolkit_dir}${file.separator}conductor.xml" target="init"> 
			<property name="args.input" value="${projdir}/${MAP_file}"/> 
			<property name="output.dir" value="${outdir}/hierarchy/eclipsecontent"/> 
			<property name="dita.temp.dir" value="${outdir}/hierarchy/temp"/> 
			<property name="transtype" value="eclipsecontent"/> 
			<property name="args.draft" value="yes"/> 
			<property name="args.indexshow" value="yes"/> 
			<property name="dita.extname" value="${EXTNAME}"/> 
		</ant> 
	</target> 
	<!-- Create eclipsehelp output --> 
	<target name="dita2eclipsehelp"> 
		<ant antfile="${toolkit_dir}${file.separator}conductor.xml" target="init"> 
			<property name="args.input" value="${projdir}/${MAP_file}"/> 
			<property name="output.dir" value="${outdir}/hierarchy/eclipsehelp"/> 
			<property name="dita.temp.dir" value="${outdir}/hierarchy/temp"/> 
			<property name="transtype" value="eclipsehelp"/> 
			<property name="args.draft" value="yes"/> 
			<property name="args.indexshow" value="yes"/> 
			<property name="dita.extname" value="${EXTNAME}"/> 
		</ant> 
	</target>
	<!-- Create wordrtf output --> 
	<target name="dita2wordrtf"> 
		<ant antfile="${toolkit_dir}${file.separator}conductor.xml" target="init"> 
			<property name="args.input" value="${projdir}/${MAP_file}"/> 
			<property name="output.dir" value="${outdir}/hierarchy/wordrtf"/> 
			<property name="dita.temp.dir" value="${outdir}/hierarchy/temp"/> 
			<property name="transtype" value="wordrtf"/> 
			<property name="args.draft" value="yes"/> 
			<property name="args.indexshow" value="yes"/> 
			<property name="dita.extname" value="${EXTNAME}"/> 
		</ant> 
	</target> 
	
	<target name="create-stage-tarball">
		<tar tarfile="${outdir}/stages/${stage}.tar.gz" 
			basedir="${projdir}/stages/${stage}"
			excludes=".svn .svn/** **/*.svn"
			compression="gzip"
			longfile="gnu" />
	</target>
	
	<!-- this should probably done in a more intelligent way -->
	<target name="create-stage-tarballs">
		<mkdir dir="${outdir}/stages/" />
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage1"/>
		</antcall>
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage2"/>
		</antcall>
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage3"/>
		</antcall>
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage4"/>
		</antcall>
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage5"/>
		</antcall>
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage6"/>
		</antcall>
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage7"/>
		</antcall>
		<antcall target="create-stage-tarball">
			<param name="stage" value="stage-serving-static-pages"/>
		</antcall>
	</target>
	
	<target name="create-resources-tarball">
		<tar tarfile="${outdir}/resources.tar.gz" 
			basedir="${projdir}/resources"
			excludes=".svn .svn/** **/*.svn"
			compression="gzip"
			longfile="gnu" />
	</target>
	
	<target name="create-website-structure" depends="dita2website, create-stage-tarballs, create-resources-tarball">
		<property name="website.base" value="${outdir}/website" />
		<property name="website.templates" value="${website.base}/templates" />
		<property name="website.stages" value="${website.base}//stages" />
		<property name="website.images" value="${website.base}/images/" />
		<property name="website.resources" value="${website.base}/resources" />
		<mkdir dir="${website.templates}" />
		<mkdir dir="${website.stages}" />
		<mkdir dir="${website.images}" />
		<mkdir dir="${website.resources}" />
		
		<copy todir="${website.templates}" overwrite="yes">
			<fileset dir="${outdir}/website-tmp/topics/tutorial" includes="**/*.html"/>
			<fileset dir="${outdir}/website-tmp/topics/reference" includes="**/*.html"/>
			<!--<fileset dir="${outdir}/website-tmp/topics/concepts" includes="**/*.html"/>-->
		</copy>
		<copy file="${outdir}/website-tmp/toc.html" todir="${website.templates}" overwrite="yes"></copy>
		
		<copy todir="${website.images}" overwrite="yes">
			<fileset dir="${outdir}/website-tmp/topics/images" includes="**/*"/>
		</copy>
		
		<replaceregexp match="href=&quot;(../)*topics/(tutorial|reference|concepts)" replace="href=&quot;documentation/tutorial" flags="g" byline="true">
		    <fileset dir="${website.templates}" includes="**/*.html"/>
		</replaceregexp>
		<replaceregexp match="src=&quot;(../)*images" replace="src=&quot;images/tutorial" flags="g" byline="true">
		    <fileset dir="${website.templates}" includes="**/*.html"/>
		</replaceregexp>
		
		<copy todir="${website.stages}" overwrite="yes">
			<fileset dir="${outdir}/stages" includes="**/*"/>
		</copy>
		
		<copy todir="${website.resources}" file="${outdir}/resources.tar.gz" overwrite="yes"></copy>
		
	</target>
	
	<target name="create-xhtml-file-structure" depends="dita2xhtml, create-stage-tarballs">
		<copy todir="${outdir}/xhtml/topics/" overwrite="yes">
			<fileset dir="${projdir}/shjs" includes="**/*.js"/>
		</copy>
		<mkdir dir="${outdir}/xhtml/stages/" />
		<copy todir="${outdir}/xhtml/stages" overwrite="yes">
			<fileset dir="${outdir}/stages" includes="**/*"/>
		</copy>
	</target>

</project> 
